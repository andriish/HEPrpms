cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
#-----------------------------------------------------------------------
project(TheP8I)
set(PROJECT_VERSION 2.0.2)
SET(THEP8I_VERSION 2.0.2)
SET(THEP8I_VERSION_MAJOR  2)
SET(THEP8I_VERSION_MINOR  0)
SET(THEP8I_VERSION_PATCH  2)

set(CMAKE_VERBOSE_MAKEFILE ON)
#This module respects HFS, e.g. defines lib or lib64 when it is needed.
include("GNUInstallDirs")
#---Setting THEP8I Build type-------------------------------------------
if(CMAKE_BUILD_TYPE)
  message(STATUS "THEP8I Build type: ${CMAKE_BUILD_TYPE}")
else(CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
  message(STATUS "THEP8I Build type not specified, use: ${CMAKE_BUILD_TYPE}")
endif(CMAKE_BUILD_TYPE)
string(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE)
#-------------Options---------------------------------------------------
option(THEP8I_BUILD_DOCS          "Enables building of documentation" OFF)
option(THEP8I_ENABLE_TEST         "Enables building of tests." ON)
option(THEP8I_GENERATE_INTERFACES "Enables generation of TheP8I interfaces to Pythia8." ON)
message(STATUS "THEP8I: THEP8I_ENABLE_TEST            ${THEP8I_ENABLE_TEST}")
message(STATUS "THEP8I: THEP8I_BUILD_DOCS             ${THEP8I_BUILD_DOCS}")
message(STATUS "THEP8I: THEP8I_GENERATE_INTERFACES    ${THEP8I_GENERATE_INTERFACES}")

#------------Prepend our own CMake Modules to the search path-----------
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/Modules ${CMAKE_MODULE_PATH})

#### RPATH handling #####
set(CMAKE_MACOSX_RPATH 1)
# use, i.e. don't skip the full RPATH for the build tree
SET(CMAKE_SKIP_BUILD_RPATH  TRUE)
# when building, don't use the install RPATH already
# (but later on when installing)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")

# add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

set(CMAKE_SKIP_RPATH ON)
# the RPATH to be used when installing, but only if it's not a system directory
LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}" isSystemDir)
IF("${isSystemDir}" STREQUAL "-1")
   SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
ENDIF("${isSystemDir}" STREQUAL "-1")
########################################################################
include(CheckCXXCompilerFlag)
if (NOT THEP8I_CXX_STANDARD)
  set(THEP8I_CXX_STANDARD 11)
endif()
set(CMAKE_CXX_STANDARD ${THEP8I_CXX_STANDARD})
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

message(STATUS "THEP8I: THEP8I_CXX_STANDARD ${THEP8I_CXX_STANDARD} " )
message(STATUS "THEP8I: CMAKE_CXX_COMPILER_ID ${CMAKE_CXX_COMPILER_ID} " )
message(STATUS "THEP8I: CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}}  " )
message(STATUS "THEP8I: CMAKE_C_COMPILER_ID ${CMAKE_C_COMPILER_ID} " )
########################################################################

find_package(Perl REQUIRED)
message(STATUS "THEP8I: PERL_EXECUTABLE=${PERL_EXECUTABLE}")
set(PERL ${PERL_EXECUTABLE})

find_package(Pythia8 REQUIRED)
message(STATUS "THEP8I: PYTHIA8_XMLDOC_DIR=${PYTHIA8_XMLDOC_DIR} PYTHIA8_LIBRARIES=${PYTHIA8_LIBRARIES} PYTHIA8_INCLUDE_DIRS=${PYTHIA8_INCLUDE_DIRS}")
set(PYTHIA8_XMLDIR ${PYTHIA8_XMLDOC_DIR})

find_package(ThePEG REQUIRED)
message(STATUS "THEP8I: THEPEG_REPOSITORY_DIR=${THEPEG_REPOSITORY_DIR} THEPEG_LIBRARIES=${THEPEG_LIBRARIES} THEPEG_INCLUDE_DIRS=${THEPEG_INCLUDE_DIRS} THEPEG_LIBRARY_DIR=${THEPEG_LIBRARY_DIR} RUNTHEPEG=${RUNTHEPEG} SETUPTHEPEG=${SETUPTHEPEG}")
find_package(GSL REQUIRED)

message(STATUS "THEP8I: GSL_VERSION=${GSL_VERSION} GSL_LIBRARIES=${GSL_LIBRARIES} GSL_INCLUDE_DIRS=${GSL_INCLUDE_DIRS}")
########################################################################



configure_file(bin/fixinterfaces.pl.in ${PROJECT_BINARY_DIR}/bin/fixinterfaces.pl @ONLY)
configure_file(bin/P8Particles.pl.in ${PROJECT_BINARY_DIR}/bin/P8Particles.pl @ONLY)
configure_file(bin/interfaces.pl.in ${PROJECT_BINARY_DIR}/bin/interfaces.pl @ONLY)

make_directory(${PROJECT_BINARY_DIR}/include/TheP8I/BE/)
make_directory(${PROJECT_BINARY_DIR}/include/TheP8I/Hadronization/)

set (tps init var input output interfaces)
set(BEAUTOGENERATED )
set(HadronizationAUTOGENERATED )
foreach(X ${tps})
  if (THEP8I_GENERATE_INTERFACES)
    add_custom_command( OUTPUT  ${PROJECT_BINARY_DIR}/include/TheP8I/BE/BoseEinsteinHandler-${X}.h
                        DEPENDS ${PROJECT_BINARY_DIR}/bin/interfaces.pl
                        COMMAND ${PROJECT_BINARY_DIR}/bin/interfaces.pl --${X} include/TheP8I/BE/BoseEinsteinHandler BoseEinstein
                        WORKING_DIRECTORY "${PROJECT_BINARY_DIR}"
                        VERBATIM)
    add_custom_command( OUTPUT  ${PROJECT_BINARY_DIR}/include/TheP8I/Hadronization/StringFragmentation-${X}.h
                        DEPENDS ${PROJECT_BINARY_DIR}/bin/interfaces.pl
                        COMMAND ${PROJECT_BINARY_DIR}/bin/interfaces.pl --${X} include/TheP8I/Hadronization/StringFragmentation StringFragmentation StringZ StringPT StringFlav FragmentationSystems MiniStringFragmentation HadronLevel
                        WORKING_DIRECTORY "${PROJECT_BINARY_DIR}"
                        VERBATIM)
  else()
    file(COPY ${PROJECT_SOURCE_DIR}/include/TheP8I/BE/BoseEinsteinHandler-${X}.h 
              DESTINATION ${PROJECT_BINARY_DIR}/include/TheP8I/BE/BoseEinsteinHandler-${X}.h)
    file(COPY ${PROJECT_SOURCE_DIR}/include/TheP8I/Hadronization/StringFragmentation-${X}.h 
              DESTINATION ${PROJECT_BINARY_DIR}/include/TheP8I/Hadronization/StringFragmentation-${X}.h)
  endif()
  list(APPEND BEAUTOGENERATED ${PROJECT_BINARY_DIR}/include/TheP8I/BE/BoseEinsteinHandler-${X}.h)
  list(APPEND HadronizationAUTOGENERATED ${PROJECT_BINARY_DIR}/include/TheP8I/Hadronization/StringFragmentation-${X}.h)
endforeach()

set(BEmySOURCES  ${PROJECT_SOURCE_DIR}/src/BE/BoseEinsteinHandler.cc)

set(BEDOCFILES  ${PROJECT_SOURCE_DIR}/include/TheP8I/BE/BoseEinsteinHandler.h )

set(ConfigmySOURCES  ${PROJECT_SOURCE_DIR}/src/Config/RndmEngine.cc  
                     ${PROJECT_SOURCE_DIR}/src/Config/Pythia8Interface.cc)

set(ConfigDOCFILES   ${PROJECT_SOURCE_DIR}/include/TheP8I/Config/TheP8I.h 
                     ${PROJECT_SOURCE_DIR}/include/TheP8I/Config/RndmEngine.h 
                     ${PROJECT_SOURCE_DIR}/include/TheP8I/Config/Pythia8Interface.h 
                     ${PROJECT_SOURCE_DIR}/include/TheP8I/Config/RopeUserHooks.h  
                     ${PROJECT_SOURCE_DIR}/include/TheP8I/Config/VetoRopeUserHooks.h 
                     ${PROJECT_SOURCE_DIR}/include/TheP8I/Config/ParameterMapper.h )

set(HadronizationmySOURCES  ${PROJECT_SOURCE_DIR}/src/Hadronization/StringFragmentation.cc 
                            ${PROJECT_SOURCE_DIR}/src/Hadronization/StringPipe.cc 
                            ${PROJECT_SOURCE_DIR}/src/Hadronization/OverlapPythiaHandler.cc 
                            ${PROJECT_SOURCE_DIR}/src/Hadronization/ParameterHandler.cc 
                            ${PROJECT_SOURCE_DIR}/src/Hadronization/RandomAverageHandler.cc 
                            ${PROJECT_SOURCE_DIR}/src/Hadronization/RandomHandler.cc 
                            ${PROJECT_SOURCE_DIR}/src/Hadronization/Ropewalk.cc )
            
set(HadronizationDOCFILES  ${PROJECT_SOURCE_DIR}/include/TheP8I/Hadronization/StringFragmentation.h 
                           ${PROJECT_SOURCE_DIR}/include/TheP8I/Hadronization/StringPipe.h 
                           ${PROJECT_SOURCE_DIR}/include/TheP8I/Hadronization/OverlapPythiaHandler.h 
                           ${PROJECT_SOURCE_DIR}/include/TheP8I/Hadronization/ParameterHandler.h 
                           ${PROJECT_SOURCE_DIR}/include/TheP8I/Hadronization/RandomAverageHandler.h 
                           ${PROJECT_SOURCE_DIR}/include/TheP8I/Hadronization/RandomHandler.h 
                           ${PROJECT_SOURCE_DIR}/include/TheP8I/Hadronization/Ropewalk.h  )

set(StrategymySOURCES  ${PROJECT_SOURCE_DIR}/src/Strategy/TheP8IStrategy.cc)

set(StrategyDOCFILES  ${PROJECT_SOURCE_DIR}/include/TheP8I/Strategy/TheP8IStrategy.h)

########################################################################
## Core
########################################################################
#We need to export all symbols on WIn to build .lib files
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
########################################################################

add_library(TheP8I  SHARED ${StrategymySOURCES} ${StrategyDOCFILES} 
                           ${ConfigmySOURCES} ${ConfigDOCFILES} 
                           ${HadronizationmySOURCES} ${HadronizationDOCFILES} ${HadronizationAUTOGENERATED} 
                           ${BEmySOURCES} ${BEDOCFILES} ${BEAUTOGENERATED})
target_compile_definitions(TheP8I PRIVATE PYTHIA8_XMLDIR=\"${PYTHIA8_XMLDIR}\")
target_include_directories(TheP8I PRIVATE ${THEPEG_INCLUDE_DIRS} ${GSL_INCLUDE_DIRS})
target_include_directories(TheP8I PRIVATE ${PROJECT_SOURCE_DIR}/include)
target_include_directories(TheP8I PRIVATE ${PYTHIA8_INCLUDE_DIR})
target_include_directories(TheP8I PRIVATE ${PROJECT_SOURCE_DIR}/include/TheP8I/Config/ )
target_include_directories(TheP8I PRIVATE ${PROJECT_SOURCE_DIR}/include/TheP8I/Strategy/)
target_include_directories(TheP8I PRIVATE ${PROJECT_BINARY_DIR}/include/TheP8I/Hadronization/ ${PROJECT_SOURCE_DIR}/include/TheP8I/Hadronization/ )
target_include_directories(TheP8I PRIVATE ${PROJECT_BINARY_DIR}/include/TheP8I/BE/ ${PROJECT_SOURCE_DIR}/include/TheP8I/BE/ )
set_target_properties(TheP8I PROPERTIES OUTPUT_NAME TheP8I  SOVERSION 0
                                               ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib
                                               LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib
                                               RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
target_link_libraries(TheP8I PRIVATE ${PYTHIA8_LIBRARIES} )
if (PYTHIA8_VERSION VERSION_GREATER 8.306)
  set(THREADS_PREFER_PTHREAD_FLAG ON)
  find_package(Threads REQUIRED)
endif()
if (Threads_FOUND)
  if(THREADS_HAVE_PTHREAD_ARG)
    target_compile_options(TheP8I PUBLIC "-pthread")
  endif()
  if(CMAKE_THREAD_LIBS_INIT)
    target_link_libraries(TheP8I PUBLIC "${CMAKE_THREAD_LIBS_INIT}")
  endif()
endif()
install(TARGETS TheP8I DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libs) 
install(FILES 
             ${PROJECT_BINARY_DIR}/share/TheP8IParticles.in
             ${PROJECT_SOURCE_DIR}/share/OverlapStringFragmenter.in
             ${PROJECT_SOURCE_DIR}/share/TheP8IRemove.in
             ${PROJECT_SOURCE_DIR}/share/TheP8IDefaults.in
             ${PROJECT_SOURCE_DIR}/test/HerwigLEPTheP8I.in
             ${PROJECT_SOURCE_DIR}/test/HerwigDISTheP8I.in
             ${PROJECT_SOURCE_DIR}/test/HerwigLHC.in
             ${PROJECT_SOURCE_DIR}/test/HerwigLHCTheP8I.in
             ${PROJECT_SOURCE_DIR}/test/HerwigDIS.in
             ${PROJECT_SOURCE_DIR}/test/HerwigLEP.in
             ${PROJECT_SOURCE_DIR}/test/SimpleLHC.in
             ${PROJECT_SOURCE_DIR}/test/SimpleLEP.in
             ${PROJECT_SOURCE_DIR}/test/TestJunctions.in
             DESTINATION ${CMAKE_INSTALL_DATADIR}/TheP8I COMPONENT libs) 

########################################################################

make_directory(${PROJECT_BINARY_DIR}/share/)
make_directory(${PROJECT_BINARY_DIR}/lib/)
configure_file(${PYTHIA8_XMLDIR}/ParticleData.xml ${PROJECT_BINARY_DIR}/ParticleData.xml COPYONLY)
add_custom_command( OUTPUT  ${PROJECT_BINARY_DIR}/share/TheP8IParticles.in
                    DEPENDS ${PROJECT_BINARY_DIR}/bin/P8Particles.pl ${PYTHIA8_XMLDIR}/ParticleData.xml
                    #COMMAND cp ${PYTHIA8_XMLDIR}/ParticleData.xml ${PROJECT_BINARY_DIR}/ParticleData.xml
                    COMMAND sed -i "s/name=\"Xi_cdif\+\"\ antiName=\"Xi_cdif0/name=\"Xi_cdif\+\"\ antiName=\"Xi_cdif\-/g" ${PROJECT_BINARY_DIR}/ParticleData.xml
                    COMMAND sed -i "s/antiName\=\"Xi_cdif0/antiName\=\"Xi_cdifbar0/g" ${PROJECT_BINARY_DIR}/ParticleData.xml
                    COMMAND ${PROJECT_BINARY_DIR}/bin/P8Particles.pl ${PROJECT_BINARY_DIR}/ParticleData.xml > ${PROJECT_BINARY_DIR}/share/TheP8IParticles.in
                    WORKING_DIRECTORY "${PROJECT_BINARY_DIR}"
                    VERBATIM)
#<particle id="9904230" name="Xi_cdif+" antiName="Xi_cdif0" spinType="0" chargeType="3" colType="0" 
#          m0="0.00000"> 
#</particle> 


add_custom_command( OUTPUT  ${PROJECT_BINARY_DIR}/lib/TheP8IDefaults.rpo
                    DEPENDS ${PROJECT_SOURCE_DIR}/share/TheP8IDefaults.in ${PROJECT_BINARY_DIR}/share/TheP8IParticles.in TheP8I  ${THEPEG_REPOSITORY_DIR}/ThePEGDefaults.rpo
                    COMMAND ${SETUPTHEPEG} -L${PROJECT_BINARY_DIR}/lib  -L${THEPEG_LIBRARY_DIR} -i${PROJECT_BINARY_DIR}/share --exitonerror --init -r ${THEPEG_REPOSITORY_DIR}/ThePEGDefaults.rpo -o ${PROJECT_BINARY_DIR}/lib/TheP8IDefaults.rpo ${PROJECT_SOURCE_DIR}/share/TheP8IDefaults.in
                    WORKING_DIRECTORY "${PROJECT_BINARY_DIR}"
                    VERBATIM)
                    
add_custom_target( full ALL  DEPENDS  ${PROJECT_BINARY_DIR}/lib/TheP8IDefaults.rpo  )

if(THEP8I_BUILD_DOCS)
  find_package(Doxygen REQUIRED)
  find_package(LATEX COMPONENTS PDFLATEX MAKEINDEX REQUIRED)
  message(STATUS "THEP8I: LATEX_FOUND=${LATEX_FOUND} PDFLATEX_COMPILER=${PDFLATEX_COMPILER} MAKEINDEX_COMPILER=${MAKEINDEX_COMPILER}")
  if (DOXYGEN_FOUND)
    find_program(DOXYGEN NAMES doxygen doxygen.exe HINTS ${DOXYGEN_EXECUTABLE})
  else()
    find_program(DOXYGEN NAMES doxygen doxygen.exe )
  endif()
  if (DOXYGEN)
    message(STATUS "THEP8I doc: doxygen found in ${DOXYGEN}. Generation of documentation is enabled.")
    file(WRITE ${PROJECT_BINARY_DIR}/doc/refman.conf  
    #@INCLUDE=ThePEG.conf\n
    PROJECT_NAME           = TheP8I\n
    PROJECT_NUMBER         = ${PROJECT_VERSION}\n
    "FILE_PATTERNS          = *.icc *.cc *.h\n"
    INPUT                  = refman.h \  AllInterfaces.h \ \\\n  
    ${CMAKE_CURRENT_SOURCE_DIR}/include/TheP8I/BE/  \ \\\n
    ${CMAKE_CURRENT_SOURCE_DIR}/include/TheP8I/Config/ \ \\\n
    ${CMAKE_CURRENT_SOURCE_DIR}/include/TheP8I/Hadronization \n
    ${PROJECT_BINARY_DIR}/include/TheP8I/BE/  \ \\\n
    ${PROJECT_BINARY_DIR}/include/TheP8I/Config/ \ \\\n
    ${PROJECT_BINARY_DIR}/include/TheP8I/Hadronization \n
    FULL_PATH_NAMES        = NO\n
    HTML_OUTPUT            = refman-html\n
    LATEX_OUTPUT           = refman-latex  \n
    GENERATE_TAGFILE       = TheP8I-refman.tag\n
    TAGFILES               = ThePEG-refman.tag=refman-html\n
    INCLUDE_PATH           = ${PROJECT_BINARY_DIR}/include \ \\\n  ${CMAKE_CURRENT_SOURCE_DIR}/include \n )
  
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/doc/refman.h ${PROJECT_BINARY_DIR}/doc/refman.h IMMEDIATE @ONLY)
    add_custom_target( AllInterfaces
                      DEPENDS ${PROJECT_BINARY_DIR}/bin/fixinterfaces.pl
                      COMMAND ${PROJECT_BINARY_DIR}/bin/fixinterfaces.pl AllInterfaces.h
                      COMMAND ${PERL} -i -p -e "s/\&rarr//g"  AllInterfaces.h
                      COMMAND ${PERL} -i -p -e "s/\&harr//g"  AllInterfaces.h
                      COMMAND ${PERL} -i -p -e "s/q_last/qlast/g"  AllInterfaces.h
                      WORKING_DIRECTORY "${PROJECT_BINARY_DIR}/doc"
                      VERBATIM)
    add_custom_target( refman-html 
                     DEPENDS ${PROJECT_BINARY_DIR}/doc/refman.conf ${PROJECT_BINARY_DIR}/doc/refman.h  AllInterfaces
                     COMMAND ${DOXYGEN}  refman.conf
                     WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/doc
                     VERBATIM)
    add_custom_target( latexcompileall
                     COMMAND ${PDFLATEX_COMPILER} refman
                     COMMAND ${PDFLATEX_COMPILER} refman
                     COMMAND ${PDFLATEX_COMPILER} refman
                     COMMENT "Creating manual "
                     WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/doc/refman-latex
                     DEPENDS refman-html
                     VERBATIM)
    add_custom_target(all-formats ALL) # Entry point of execution.
    ADD_DEPENDENCIES( all-formats latexcompileall)
    install(FILES ${PROJECT_BINARY_DIR}/doc/refman-latex/refman.pdf DESTINATION  ${CMAKE_INSTALL_MANDIR} COMPONENT doc)
    install(FILES ${PROJECT_BINARY_DIR}/doc/TheP8I-refman.tag  DESTINATION  ${CMAKE_INSTALL_DATADIR}/TheP8I/doc COMPONENT doc)
    install(DIRECTORY ${PROJECT_BINARY_DIR}/doc/refman-html DESTINATION  ${CMAKE_INSTALL_DATADIR}/TheP8I/doc/refman-html/ COMPONENT doc)
  else()
    message(STATUS "TheP8I doc: doxygen not found, generation of documentation is disabled.")
  endif()
endif()

#test suite
if(THEP8I_ENABLE_TEST)
  ENABLE_TESTING()
  make_directory( ${PROJECT_BINARY_DIR}/test)
  set(TestJunctions_la_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/test/TestJunctions.cc ${CMAKE_CURRENT_SOURCE_DIR}/test/TestJunctions.h )
  add_library(TestJunctions MODULE  ${TestJunctions_la_SOURCES})
  target_include_directories(TestJunctions PRIVATE ${THEPEG_INCLUDE_DIRS} ${GSL_INCLUDE_DIRS})
  if (Threads_FOUND)
    if(THREADS_HAVE_PTHREAD_ARG)
      target_compile_options(TestJunctions PUBLIC "-pthread")
    endif()
    if(CMAKE_THREAD_LIBS_INIT)
      target_link_libraries(TestJunctions PUBLIC "${CMAKE_THREAD_LIBS_INIT}")
    endif()
  endif() 
  add_test(NAME SimpleLEPrun COMMAND ${SETUPTHEPEG}  -l${PROJECT_BINARY_DIR}/lib --exitonerror  -r ${PROJECT_BINARY_DIR}/lib/TheP8IDefaults.rpo ${PROJECT_SOURCE_DIR}/test/SimpleLEP.in  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/test)
  SET_TESTS_PROPERTIES( SimpleLEPrun PROPERTIES DEPENDS TheP8I)
  SET_TESTS_PROPERTIES( SimpleLEPrun PROPERTIES DEPENDS ${PROJECT_BINARY_DIR}/lib/TheP8IDefaults.rpo)
  add_test(NAME SimpleLEPout COMMAND ${RUNTHEPEG}  -l${PROJECT_BINARY_DIR}/lib -L${THEPEG_LIBRARY_DIR} -d 0 ${PROJECT_BINARY_DIR}/test/SimpleLEP.run WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/test)
  SET_TESTS_PROPERTIES( SimpleLEPout PROPERTIES ENVIRONMENT "PYTHIA8DATA=${PYTHIA8_XMLDIR}" 
                                                ENVIRONMENT "DYLD_LIBRARY_PATH=${PYTHIA8_LIBRARY_DIR}:${THEPEG_LIBRARY_DIR}:$ENV{DYLD_LIBRARY_PATH}"
                                                ENVIRONMENT "LD_LIBRARY_PATH=${PYTHIA8_LIBRARY_DIR}:${THEPEG_LIBRARY_DIR}:$ENV{LD_LIBRARY_PATH}"
                                                )
  SET_TESTS_PROPERTIES( SimpleLEPout PROPERTIES DEPENDS SimpleLEPrun)
  
  add_test(NAME TestJunctionsrun COMMAND ${SETUPTHEPEG}  -l${PROJECT_BINARY_DIR}/lib --exitonerror  -r ${PROJECT_BINARY_DIR}/lib/TheP8IDefaults.rpo ${PROJECT_SOURCE_DIR}/test/TestJunctions.in WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/test)
  SET_TESTS_PROPERTIES( TestJunctionsrun PROPERTIES DEPENDS TheP8I)
  SET_TESTS_PROPERTIES( TestJunctionsrun PROPERTIES DEPENDS TestJunctions)
  SET_TESTS_PROPERTIES( TestJunctionsrun PROPERTIES DEPENDS ${PROJECT_BINARY_DIR}/lib/TheP8IDefaults.rpo)
  add_test(NAME TestJunctionsout COMMAND ${RUNTHEPEG}  -l${PROJECT_BINARY_DIR}/lib -d 1 -x ${PROJECT_BINARY_DIR}/${TestJunctions} ${PROJECT_BINARY_DIR}/test/TestJunctions.run WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/test)
  SET_TESTS_PROPERTIES( TestJunctionsout PROPERTIES ENVIRONMENT "PYTHIA8DATA=${PYTHIA8_XMLDIR}"
                                                ENVIRONMENT "DYLD_LIBRARY_PATH=${PYTHIA8_LIBRARY_DIR}:${THEPEG_LIBRARY_DIR}:$ENV{DYLD_LIBRARY_PATH}"
                                                ENVIRONMENT "LD_LIBRARY_PATH=${PYTHIA8_LIBRARY_DIR}:${THEPEG_LIBRARY_DIR}:$ENV{LD_LIBRARY_PATH}"
                                                )
  SET_TESTS_PROPERTIES( TestJunctionsout PROPERTIES DEPENDS TestJunctionsrun)

  find_package(Herwig)
  message(STATUS "THEP8I: HERWIG_REPOSITORY_DIR=${HERWIG_REPOSITORY_DIR} HERWIG_INCLUDE_DIRS=${HERWIG_INCLUDE_DIRS} HERWIG=${HERWIG}")
  if (HERWIG_FOUND)
    file(COPY ${HERWIG_REPOSITORY_DIR}/HerwigDefaults.rpo DESTINATION ${PROJECT_BINARY_DIR}/test/)
    set(testH HerwigLEP HerwigLHC HerwigDIS HerwigLEPTheP8I HerwigLHCTheP8I HerwigDISTheP8I)
    foreach(H ${testH})
       add_test(NAME ${H}read COMMAND ${HERWIG} read  ${PROJECT_SOURCE_DIR}/test/${H}.in  -l${PROJECT_BINARY_DIR}/lib  -L${THEPEG_LIBRARY_DIR} -i${HERWIG_REPOSITORY_DIR}         WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/test)
       add_test(NAME ${H}run  COMMAND ${HERWIG} run   ${PROJECT_BINARY_DIR}/test/${H}.run -l${PROJECT_BINARY_DIR}/lib  -L${THEPEG_LIBRARY_DIR} -i${HERWIG_REPOSITORY_DIR} -N 100  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/test)
       SET_TESTS_PROPERTIES( ${H}run PROPERTIES DEPENDS TheP8I ENVIRONMENT "PYTHIA8DATA=${PYTHIA8_XMLDIR}"
                                                ENVIRONMENT "DYLD_LIBRARY_PATH=${PYTHIA8_LIBRARY_DIR}:$ENV{DYLD_LIBRARY_PATH}"
                                                ENVIRONMENT "LD_LIBRARY_PATH=${PYTHIA8_LIBRARY_DIR}:$ENV{LD_LIBRARY_PATH}"
                                                )
       SET_TESTS_PROPERTIES( ${H}run PROPERTIES DEPENDS ${H}read ENVIRONMENT "PYTHIA8DATA=${PYTHIA8_XMLDIR}"
                                                ENVIRONMENT "DYLD_LIBRARY_PATH=${PYTHIA8_LIBRARY_DIR}:${THEPEG_LIBRARY_DIR}:$ENV{DYLD_LIBRARY_PATH}"
                                                ENVIRONMENT "LD_LIBRARY_PATH=${PYTHIA8_LIBRARY_DIR}:${THEPEG_LIBRARY_DIR}:$ENV{LD_LIBRARY_PATH}"
                                                )
    endforeach()
  endif()
endif()


#This is for developers only
find_program (ASTYLE NAMES astyle)
if (ASTYLE)
  message(STATUS "THEP8I: Developers only: astyle found in ${ASTYLE}. Formating of C++ code is possible.")
  add_custom_target(beauty COMMAND ${ASTYLE}  --keep-one-line-blocks src/*cc WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} )
endif()
find_program (CPPCHECK NAMES cppcheck)
if(CPPCHECK)
  message(STATUS "THEP8I: Developers only: cppcheck found in ${CPPCHECK}. Static analysis of C++ code is possible.")
  add_custom_target(staticcheck COMMAND ${CPPCHECK} --force  --suppress=unusedFunction -v -x c++ --std=c++11 --enable=all -I./include  src/*.cc WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})
endif()
########################################################################
## CPACK
########################################################################
#General CPACK settings
INCLUDE(InstallRequiredSystemLibraries)

set(CPACK_PACKAGE_NAME "TheP8I")
set(CPACK_PACKAGE_VENDOR "TheP8I Developers")
#Should the version be defined above?
set(CPACK_PACKAGE_VERSION 2)
set(CPACK_PACKAGE_VERSION_MAJOR 2)
set(CPACK_PACKAGE_VERSION_MINOR 0)
set(CPACK_PACKAGE_VERSION_PATCH 2)
set(CPACK_PACKAGE_RELEASE 0)
set(CPACK_PACKAGE_FILE_NAME "TheP8I")
set(CPACK_PACKAGE_DESCRIPTION "Interface of Pythia8 Lund fragmrnattion for ThePEG")

set(CPACK_PACKAGING_INSTALL_PREFIX "/usr")
SET(CPACK_INSTALL_PREFIX "/usr")
SET(CPACK_OUTPUT_FILE_PREFIX binpackages)

set(CPACK_COMPONENTS_ALL    libs doc  )

INCLUDE(CPack)
