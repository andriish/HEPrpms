diff -Naur ORIG/configure.in PATCHED/configure.in
--- ORIG/configure.in	2012-09-25 14:34:31.000000001 +0200
+++ PATCHED/configure.in	2021-04-21 16:13:22.244338427 +0200
@@ -6,6 +6,7 @@
 AC_LANG_CPLUSPLUS
 
 hepmclocation=$HEPMCLOCATION
+hepmc3location=$HEPMC3LOCATION
 pythialocation=$PYTHIALOCATION
 
 host_os=`uname -s`
@@ -27,12 +28,16 @@
 	hepmclocation=$HEPMCLOCATION
 fi
 
+if test -z $hepmc3location; then
+	hepmc3location=$HEPMC3LOCATION
+fi
 if test -z $pythialocation; then
 	pythialocation=$PYTHIALOCATION
 fi
 
 if test "$AFS_PATHS" == "yes"; then
 	with_HepMC=$HEPMCLOCATION
+	with_HepMC3=$HEPMC3LOCATION
 	with_Pythia8=$PYTHIALOCATION
 fi
 
@@ -46,6 +51,12 @@
 echo ""
 echo "Using HepMC location:   $with_HepMC"
 
+AC_ARG_WITH([HepMC3],
+   [AS_HELP_STRING([--with-HepMC3], [Path to HepMC3 3.xx] )],,
+   [with_HepMC3=$hepmc3location])
+
+echo ""
+echo "Using HepMC3 location:   $with_HepMC3"
 AC_ARG_WITH([Pythia8],
    [AS_HELP_STRING([--with-Pythia8], [Path to Pythia 8.1 or later (used by examples only)] )],
    [ echo "Using Pythia8 location: $with_Pythia8" ],
@@ -150,6 +161,19 @@
   echo "        (consider using 'source platform/afs.paths.sh' [or .csh])" &&
   echo ""
 ])
+##############################################################################
+# Check for HepMC header files
+AC_SUBST(with_HepMC3)
+CPPFLAGS="-I$with_HepMC3/include $CPPFLAGS"
+
+AC_CHECK_HEADERS([HepMC3/Version.h], ,
+[ echo "" &&
+  echo "WARNING: HepMC3 not found, will compile without it." &&
+  echo "         To create libHepMC3Event provide HepMC3 location using:" &&
+  echo "         './configure --with-HepMC3=<path_to_HepMC3>' " &&
+  echo "        (consider using 'source platform/afs.paths.sh' [or .csh])" &&
+  echo ""
+])
 
 ##############################################################################
 ROOTCFLAGS=`root-config --cflags`
@@ -159,6 +183,7 @@
 
 AC_SUBST(prefix)
 AC_SUBST(with_HepMC)
+AC_SUBST(with_HepMC3)
 AC_SUBST(with_Pythia8)
 
 AC_SUBST(LD)
diff -Naur ORIG/HEPEvent/Makefile PATCHED/HEPEvent/Makefile
--- ORIG/HEPEvent/Makefile	2012-09-25 14:34:31.000000001 +0200
+++ PATCHED/HEPEvent/Makefile	2021-04-21 16:10:00.637346695 +0200
@@ -71,7 +71,7 @@
 	$(ROOTBIN)/rootcint -f $(DICT_SRC) -c -p -D_USE_ROOT_ $(LIB_HDR)
 
 $(LIB): $(LIB_OBJ)
-	$(LD) $(LDFLAGS) $(SOFLAGS) -o $(LIB) $(LIB_OBJ) -L$(ROOTLIBPATH) -lCore -lCint
+	$(LD) $(LDFLAGS) $(SOFLAGS) -o $(LIB) $(LIB_OBJ) -L$(ROOTLIBPATH) -lCore 
 
 $(LIB_A): $(LIB_OBJ)
 	ar cr $(LIB_A) $(LIB_OBJ)
diff -Naur ORIG/HEPEvent/THEPEvent.H PATCHED/HEPEvent/THEPEvent.H
--- ORIG/HEPEvent/THEPEvent.H	2010-08-02 22:41:06.000000001 +0200
+++ PATCHED/HEPEvent/THEPEvent.H	2021-04-21 16:10:07.248346424 +0200
@@ -36,6 +36,8 @@
 
 #ifdef _USE_ROOT_
 #include <TObject.h>
+#include <TBuffer.h>
+#include <TClass.h>
 #endif
 
 #include "THEPParticle.H"
diff -Naur ORIG/HEPEvent/THEPParticle.H PATCHED/HEPEvent/THEPParticle.H
--- ORIG/HEPEvent/THEPParticle.H	2010-08-02 22:41:06.000000001 +0200
+++ PATCHED/HEPEvent/THEPParticle.H	2021-04-21 16:10:14.524346125 +0200
@@ -25,6 +25,8 @@
 
 #ifdef _USE_ROOT_
 #include <TObject.h>
+#include <TBuffer.h>
+#include <TClass.h>
 #endif
 
 #include <stdio.h>
diff -Naur ORIG/HepMC3Event/HepMC3Event.cxx PATCHED/HepMC3Event/HepMC3Event.cxx
--- ORIG/HepMC3Event/HepMC3Event.cxx	1970-01-01 01:00:00.000000000 +0100
+++ PATCHED/HepMC3Event/HepMC3Event.cxx	2021-04-21 16:08:51.759349519 +0200
@@ -0,0 +1,141 @@
+#include "HepMC3Event.h"
+#include <iostream>
+
+#ifdef _USE_ROOT_
+ClassImp(HepMC3Event)
+#endif
+
+HepMC3Event::HepMC3Event( HepMC3::GenEvent &e, bool include_self_decay){
+
+  evt = &e;
+  // Make a list of the particles in the event.
+  // (Modifying these will not effect the GenParticles
+  // in the GenEvent). The pcle IDs given start at 1
+  // (and may differ from "id" in the GenEvent)
+  count_self_decays=include_self_decay;
+
+  m_particle_count = e.particles().size();
+
+  particles = new HepMC3Particle*[m_particle_count];
+
+  for(int i=0; i<m_particle_count; ++i) {
+    particles[i] = new HepMC3Particle(*e.particles()[i],this,i+1);
+  }
+}
+
+int HepMC3Event::GetNumOfParticles(){
+  return m_particle_count;
+}
+
+void  HepMC3Event::SetNumOfParticles(int num){
+  // Should throw some error as this can not be set
+  std::cout << "Warning, should not be doing this for HepMCEvent" << std::endl;
+}
+
+int HepMC3Event::GetEventNumber(){
+  return evt->event_number();
+}
+
+void HepMC3Event::SetEventNumber(int num){
+  evt->set_event_number( num );
+}
+
+
+HEPParticle* HepMC3Event::GetParticle(int idx){
+  if(idx < 1 || idx > GetNumOfParticles()){
+    std::cout << "Warning can not get particle "<< idx;
+    std::cout <<", particle ID not valid" << std::endl;
+    return 0;
+  }
+  return particles[idx-1]; //Particle ID starts at 1
+}
+
+//Only implemented in HepMCEvent. Returns particle by HepMC id.
+HepMC3Particle* HepMC3Event::GetParticleWithId( int id ){
+  for(int i=0; i <  GetNumOfParticles(); i++){
+    if(particles[i]->part->id()==id)
+      return particles[i];
+  }
+  std::cout << "Could not find particle with id "<<id<<std::endl;
+  return 0; //and have some error about not finding the
+            //particle
+}
+
+HEPParticleList* HepMC3Event::FindParticle(int pdg, HEPParticleList *list)
+{
+  // if list is not provided, it is created
+  if (!list) list=new HEPParticleList();
+
+  //loop over all particles in the event
+  for (int i=1; i<=GetNumOfParticles(); i++) {
+    HEPParticle * p = GetParticle(i);
+    if(p->GetPDGId()==pdg){
+      list->push_back(p);
+      HepMC3::GenVertexPtr end = ((HepMC3Particle *) p)->part->end_vertex();
+      //if we want to ignore cases like tau->tau+gamma:
+      if(!CountSelfDecays()&&end){
+        //Check for daughters that are the same particle type
+        //If found, remove from list.
+        for(unsigned int i=0; i<end->particles_out().size(); ++i) {
+          if(end->particles_out()[i]->pid() == pdg)
+            list->remove(p);
+        }
+      }
+    }
+  }
+  return list;
+}
+
+
+//Methods not implemented
+void  HepMC3Event::AddParticle( HEPParticle *p){}
+void  HepMC3Event::SetParticle(int idx,HEPParticle *p){}
+void  HepMC3Event::InsertParticle(int at_idx,HEPParticle *p){}
+void  HepMC3Event::Clear(int fromIdx=1){}
+void  HepMC3Event::AddParticle( int id,
+                                         int pdgid,
+                                         int status,
+                                         int mother,
+                                         int mother2,
+                                         int firstdaughter,
+                                         int lastdaughter,
+                                         double E,
+                                         double px,
+                                         double py,
+                                         double pz,
+                                         double m,
+                                         double vx,
+                                         double vy,
+                                         double vz,
+                               double tau){}
+
+std::vector<double> * HepMC3Event::Sum4Momentum(){
+  std::vector<double> * sum = new std::vector<double>(4,0.0);
+
+  for(int i=0; i < GetNumOfParticles(); i++){
+    if(particles[i]->IsStable()){
+      sum->at(0)+=particles[i]->GetPx();
+      sum->at(1)+=particles[i]->GetPy();
+      sum->at(2)+=particles[i]->GetPz();
+      sum->at(3)+=particles[i]->GetE();
+    }
+  }
+  return sum;
+}
+
+HepMC3Event::~HepMC3Event(){
+  for(int i=0; i < GetNumOfParticles(); i++){
+    delete particles[i];
+  }
+  delete[] particles;
+}
+
+#ifdef _USE_ROOT_
+void HepMC3Event::Streamer(TBuffer &)
+{
+  // streamer class for ROOT compatibility
+}
+#endif
+
+
+
diff -Naur ORIG/HepMC3Event/HepMC3Event.h PATCHED/HepMC3Event/HepMC3Event.h
--- ORIG/HepMC3Event/HepMC3Event.h	1970-01-01 01:00:00.000000000 +0100
+++ PATCHED/HepMC3Event/HepMC3Event.h	2021-04-21 16:08:51.802349518 +0200
@@ -0,0 +1,102 @@
+/**
+ * @class HepMC3Event
+ * @brief HEPEvent Interface to HepMC classes
+ *
+ * This class provides a set of methods that allow access to event data
+ * stored in HepMC format. The HepMC data structures are used by
+ * HEP programs as storage for event records in C++
+ *
+ * This class extends the GenEvent class and implements the methods of
+ * HEPEvent used by MC-TESTER. Not all functions are needed by the MC-TESTER,
+ * so dummy defintion are introduced for these
+ *
+ */
+
+#ifndef _HepMC3Event_H
+#define _HepMC3Event_H
+
+#ifdef _USE_ROOT_
+#include <TObject.h>
+#include <TBuffer.h>
+#include <TClass.h>
+#endif
+
+#include "HepMC3/GenEvent.h"
+#include "HepMC3Particle.h"
+#include "HEPEvent.H"
+
+
+
+class HepMC3Event: public HEPEvent
+{
+private:
+  /** List of particles in the event */
+  HepMC3Particle **particles;
+
+  /** Flag for how particles decaying into there own type are treated */
+  bool count_self_decays;
+
+public:
+  /** Constructor for HepMC3Event. Creates a new event using the
+      event info from GenEvent e. Also copies each particle
+      into a HepMC3Particle and stores them as a list. */
+  HepMC3Event(HepMC3::GenEvent &e, bool include_self_decay=true);
+  /** Destructor for HepMC3Event */
+  ~HepMC3Event();
+
+  /** return the number of particles in the event */
+  int GetNumOfParticles();
+
+  /** returns the event number */
+  int GetEventNumber();
+
+  /** Dummy function definition. Do not use */
+  void SetNumOfParticles(int n);
+
+  /** Dummy function definition. Do not use */
+  void SetEventNumber(int ev);
+
+  /** Returns the HEPParticle with id "idx". This is the id number as used
+   by MC-TESTER and not the id number from the original GenParticle.
+   Note: Indecies begin at 1.*/
+  HEPParticle* GetParticle( int idx);
+
+  /** Returns the HepMC3Particle by its id. This is the ID
+    number from the original GenParticle and not the ID used by
+    MC-TESTER. */
+  HepMC3Particle* GetParticleWithId( int id );
+
+  /** Dummy function definition. Do not use */
+  void  SetParticle( int idx, HEPParticle *particle) ;
+
+  /** Dummy function definition. Do not use */
+  void  AddParticle( HEPParticle *particle);
+
+  /** Dummy function definition. Do not use */
+  void  Clear (int fromIdx);
+
+  /** Dummy function definition. Do not use */
+  void  InsertParticle(int at_idx,HEPParticle *p);
+
+  /** Dummy function definition. Do not use */
+  void  AddParticle( int id, int pdgid, int status,
+                             int mother, int mother2,
+                             int firstdaughter, int lastdaughter,
+                             double E,double px, double py, double pz, double m,
+                             double vx, double vy, double vz, double tau);
+
+  std::vector<double> * Sum4Momentum();
+
+  bool CountSelfDecays(){ return count_self_decays; };
+
+  /** Implementation of FindParticle needed for excluding "self decays" */
+  HEPParticleList* FindParticle(int pdg, HEPParticleList *list);
+
+private:
+  HepMC3::GenEvent *evt;
+  int m_particle_count;
+#ifdef _USE_ROOT_
+  ClassDef(HepMC3Event,1)  //Interface to HepMC event record
+#endif
+};
+#endif
diff -Naur ORIG/HepMC3Event/HepMC3Particle.cxx PATCHED/HepMC3Event/HepMC3Particle.cxx
--- ORIG/HepMC3Event/HepMC3Particle.cxx	1970-01-01 01:00:00.000000000 +0100
+++ PATCHED/HepMC3Event/HepMC3Particle.cxx	2021-04-21 16:08:51.846349516 +0200
@@ -0,0 +1,259 @@
+#include "HepMC3Particle.h"
+#include "HepMC3Event.h"
+#include <iostream>
+
+#ifdef _USE_ROOT_
+ClassImp(HepMC3Particle)
+#endif
+
+HepMC3Particle::HepMC3Particle(){}
+
+HepMC3Particle::HepMC3Particle(HepMC3::GenParticle & particle, HEPEvent * e, int Id){
+
+  part = &particle;
+  SetEvent(e);
+  SetId(Id); 
+}
+
+HepMC3Particle::~HepMC3Particle(){
+}
+
+const HepMC3Particle HepMC3Particle::operator=(HEPParticle &p)
+{
+  if (this == &p)
+    return *this;
+
+  // SetId(p.GetId());
+
+  SetPDGId(p.GetPDGId());
+  SetStatus(p.GetStatus());
+  SetMother(p.GetMother());
+  SetMother2(p.GetMother2());
+  SetFirstDaughter(p.GetFirstDaughter());
+  SetLastDaughter(p.GetLastDaughter());
+  SetE(p.GetE());
+  SetPx(p.GetPx());
+  SetPy(p.GetPy());
+  SetPz(p.GetPz());
+  SetM(p.GetM());
+  SetVx(p.GetVx());
+  SetVy(p.GetVy());
+  SetVz(p.GetVz());
+  SetTau(p.GetTau());
+
+  return *this;
+
+}
+
+HEPEvent* HepMC3Particle::GetEvent(){
+  return event;
+}
+
+int const HepMC3Particle::GetId(){
+  return id;
+}
+
+//GetMother and Daughter methods not implemented here
+//GetDaughterList() and GetMotherList() should be used
+//instead. Still to do: some errors should be thrown.
+int const HepMC3Particle::GetMother(){
+  return 0;
+}
+
+int const HepMC3Particle::GetMother2(){
+  return 0;
+}
+
+int const HepMC3Particle::GetFirstDaughter(){
+  return 0;
+}
+
+int const HepMC3Particle::GetLastDaughter(){
+  return 0;
+}
+
+double const HepMC3Particle::GetE(){
+  return part->momentum().e();
+}
+
+double const HepMC3Particle::GetPx(){
+  return part->momentum().px();
+}
+
+double const HepMC3Particle::GetPy(){
+  return part->momentum().py();
+}
+
+double const HepMC3Particle::GetPz(){
+  return part->momentum().pz();
+}
+
+double const HepMC3Particle::GetM(){
+  return part->momentum().m();
+}
+
+int const HepMC3Particle::GetPDGId(){
+  return part->pid();
+}
+
+int const HepMC3Particle::GetStatus(){
+  return part->status();
+}
+
+int const HepMC3Particle::IsStable(){
+  return (GetStatus() == 1 || !part->end_vertex());
+}
+
+int const HepMC3Particle::Decays(){
+  return (!IsHistoryEntry() && !IsStable());
+}
+
+int const HepMC3Particle::IsHistoryEntry(){
+  return (GetStatus() == 3);
+}
+
+double const HepMC3Particle::GetVx(){
+  if(part->production_vertex()) return part->production_vertex()->position().x();
+  return 0.;
+}
+
+double const HepMC3Particle::GetVy(){
+  if(part->production_vertex()) return part->production_vertex()->position().y();
+  return 0.;
+}
+
+double const HepMC3Particle::GetVz(){
+  if(part->production_vertex()) return part->production_vertex()->position().z();
+  return 0.;
+}
+
+double const HepMC3Particle::GetTau(){
+  //Not implemented
+  if(part->end_vertex()&&part->production_vertex())
+    return (part->end_vertex()->position().t()-part->production_vertex()->position().t()); //not correct, but will see if it's empty
+  else
+    return 0;
+}
+
+//methods not implemented. Not done for HepMC.
+/**void HepMC3Particle::SetP4(MC4Vector &v){ }
+void HepMC3Particle::SetP3(MC3Vector &v){ }
+void HepMC3Particle::SetV3(MC3Vector &v){ }
+**/
+
+void HepMC3Particle::SetEvent(HEPEvent * event){
+  this->event=(HepMC3Event*)event;
+}
+
+void HepMC3Particle::SetId( int id ){
+  this->id = id;
+}
+
+//Can not use these methods for HepMC
+void HepMC3Particle::SetMother( int mother ){}
+void HepMC3Particle::SetMother2( int mother ){}
+void HepMC3Particle::SetFirstDaughter( int daughter ){}
+void HepMC3Particle::SetLastDaughter ( int daughter ){}
+
+void HepMC3Particle::SetE( double E ){
+  HepMC3::FourVector temp_mom(part->momentum());
+  temp_mom.setE(E);
+  part->set_momentum(temp_mom);
+}
+
+void HepMC3Particle::SetPx( double px ){
+  HepMC3::FourVector temp_mom(part->momentum());
+  temp_mom.setPx(px);
+  part->set_momentum(temp_mom);
+}
+
+void HepMC3Particle::SetPy( double py ){
+  HepMC3::FourVector temp_mom(part->momentum());
+  temp_mom.setPy(py);
+  part->set_momentum(temp_mom);
+}
+
+void HepMC3Particle::SetPz( double pz ){
+  HepMC3::FourVector temp_mom(part->momentum());
+  temp_mom.setPz(pz);
+  part->set_momentum(temp_mom);
+}
+
+void HepMC3Particle::SetM( double m ){
+  //Can not set in GenEvent
+  std::cout << "Can not set mass in HepMC3Particle. Set e, px, py, pz instead" <<std::endl;
+}
+
+void HepMC3Particle::SetPDGId ( int pdg ){
+  part->set_pid( pdg );
+}
+
+void HepMC3Particle::SetStatus( int st){
+  part->set_status( st );
+}
+
+void HepMC3Particle::SetVx ( double vx){
+  //Not implemented
+}
+
+void HepMC3Particle::SetVy ( double vy){
+  //Not implemented
+}
+
+void HepMC3Particle::SetVz ( double vz){
+  //Not implemented
+}
+
+void HepMC3Particle::SetTau( double tau){
+  //Not implemented
+}
+
+
+HEPParticleList* HepMC3Particle::GetDaughterList(HEPParticleList *list)
+{
+  // if list is not provided, it is created.
+  if (!list) list=new HEPParticleList();
+
+  if(!part->end_vertex()) //no daughters
+    return list;
+
+  HepMC3::GenVertexPtr end = part->end_vertex();
+
+  //iterate over daughters
+  for(unsigned int i=0; i<end->particles_out().size(); ++i) {
+    HepMC3Particle * daughter = event->GetParticleWithId((end->particles_out()[i])->id());
+    if(!list->contains(daughter->GetId())){
+      if(!daughter->IsHistoryEntry())
+        list->push_back(daughter);
+    }
+  }
+  return list;
+}
+
+HEPParticleList* HepMC3Particle::GetMotherList(HEPParticleList *list)
+{
+   // if list is not provided, it is created.
+   if (!list) list=new HEPParticleList();
+
+   if(!part->production_vertex()) //no mothers
+     return list;
+
+   HepMC3::GenVertexPtr prod = part->production_vertex();
+
+   //iterate over daughters
+   for(unsigned int i=0; i<prod->particles_in().size(); ++i) {
+       list->push_back(event->GetParticleWithId((prod->particles_in()[i])->id()));
+   }
+
+   return list;
+}
+
+
+#ifdef _USE_ROOT_
+void HepMC3Particle::Streamer(TBuffer &)
+{
+  // streamer class for ROOT compatibility
+}
+
+
+#endif
diff -Naur ORIG/HepMC3Event/HepMC3Particle.h PATCHED/HepMC3Event/HepMC3Particle.h
--- ORIG/HepMC3Event/HepMC3Particle.h	1970-01-01 01:00:00.000000000 +0100
+++ PATCHED/HepMC3Event/HepMC3Particle.h	2021-04-21 16:08:51.887349514 +0200
@@ -0,0 +1,150 @@
+/**
+ * @class HepMC3Particle
+ * @brief HEPParticle interface to HepMC classes
+ *
+ * HepMC3Particle extends GenParticle class, so that
+ * MC-TESTER can accesses the particle information through
+ * the common HEPEvent methods
+ *
+ */
+
+#ifndef _HepMC3Particle_H
+#define _HepMC3Particle_H
+
+#include "HEPParticle.H"
+#include "HepMC3/GenParticle.h"
+#include "HepMC3/GenVertex.h"
+
+#ifdef _USE_ROOT_
+#include <TObject.h>
+#include <TBuffer.h>
+#include <TClass.h>
+#endif
+
+class HepMC3Event;
+class HepMC3Particle : public HEPParticle
+{
+
+private:
+  /** Event which the particle belongs to.*/
+  HepMC3Event *   event;
+  /** ID number of particle as given by MC-TESTER (not the same as
+    GenParticle pdg_id or barcode).*/
+  int           id ;
+
+public:
+  /** Plain constructor.*/
+  HepMC3Particle();
+  /** Constructor which makes a HepMC3Particle from GenParticle. */
+  HepMC3Particle(HepMC3::GenParticle& particle, HEPEvent * e, int Id);
+  /** Destructor*/
+  ~HepMC3Particle();
+
+  /** Set all the particle properties of "p" to this particle.*/
+  const HepMC3Particle operator=(HEPParticle &p);
+
+  /** Returns the event that this particle belongs to.*/
+  HEPEvent* GetEvent()            ;
+  /** returns the ID number of particle as used by MC-TESTER (not
+    the same as GenParticle pdg_id or barcode).*/
+  int    const GetId()            ;
+  /** Dummy function definition. Do not use.*/
+  int    const GetMother()        ;
+  /** Dummy function definition. Do not use.*/
+  int    const GetMother2()       ;
+  /** Dummy function definition. Do not use.*/
+  int    const GetFirstDaughter() ;
+  /** Dummy function definition. Do not use.*/
+  int    const GetLastDaughter()  ;
+
+  /** Returns the particle's energy */
+  double const     GetE ()        ;
+  /** Returns the x component of the particle's momentum */
+  double const     GetPx()        ;
+  /** Returns the y component of the particle's momentum */
+  double const     GetPy()        ;
+  /** Returns the z component of the particle's momentum */
+  double const     GetPz()        ;
+  /** Returns the particle's mass */
+  double const     GetM ()        ;
+  /** Returns the particle's PDG ID code. */
+  int    const     GetPDGId ()    ;
+  /** Returns the particle's Status code. */
+  int    const     GetStatus()    ;
+  /** Returns true is the particle has status code 1. */
+  int    const     IsStable()     ;
+  /** Returns true is the particle has status code 2
+    or (for pythia 8) if it has a status < 0, has an end vertex and
+    does not have any daughters of the same PDG code.*/
+  int    const     Decays();
+  /** Returns true is the particle has status code 3 or (for pythia 8)
+   if fails both IsStable() and Decays().*/
+  int    const     IsHistoryEntry();
+
+  /** Returns the x value of the particle's production vertex */
+  double const     GetVx  ()      ;
+  /** Returns the y value of the particle's production vertex */
+  double const     GetVy  ()      ;
+  /** Returns the z value of the particle's production vertex */
+  double const     GetVz  ()      ;
+  /** Dummy function definition. Do not use.*/
+  double const     GetTau ()      ;
+
+  /** Sets the event that this particle belongs to */
+  void   SetEvent        ( HEPEvent  *event );
+  /** Sets ID (as used by MC-TESTER) of this particle */
+  void   SetId           ( int id       );
+  /** Dummy function definition. Do not use.*/
+  void   SetMother       ( int mother   );
+  /** Dummy function definition. Do not use.*/
+  void   SetMother2      ( int mother   );
+  /** Dummy function definition. Do not use.*/
+  void   SetFirstDaughter( int daughter );
+  /** Dummy function definition. Do not use.*/
+  void   SetLastDaughter ( int daughter );
+
+  /** Sets the energy of this particle */
+  void   SetE  ( double E  )      ;
+  /** Sets the x component of this particle's momentum */
+  void   SetPx ( double px )      ;
+  /** Sets the x component of this particle's momentum */
+  void   SetPy ( double py )      ;
+  /** Sets the x component of this particle's momentum */
+  void   SetPz ( double pz )      ;
+  /** Dummy function definition. Do not use.*/
+  void   SetM  ( double m  )      ;
+
+  /** Sets the PDG ID code of this particle */
+  void   SetPDGId ( int pdg )     ;
+  /** Sets the status code of this particle */
+  void   SetStatus( int st  )     ;
+  /** Sets the x value of this particle's production vertex */
+  void   SetVx ( double vx  )     ;
+  /** Sets the y value of this particle's production vertex */
+  void   SetVy ( double vy  )     ;
+  /** Sets the z value of this particle's production vertex */
+  void   SetVz ( double vz  )     ;
+  /** Dummy function definition. Do not use.*/
+  void   SetTau( double tau )     ;
+
+  /** Returns a list of daughter particles of this particle.
+    If a list of particle is given as a parameter, the daughters
+    are appended to the end. If the daughter is already found
+    in the list, it is not added. The function finds daughters by
+    iterating over the outgoing particles from the end vertex.
+    The daughter particle must be stable of decaying to be added to
+    the list. (for pythia 8) if the status code is negative, the
+    daughter's daughters are searched recursively.*/
+
+  HEPParticleList*  GetDaughterList(HEPParticleList *list);
+  /** Returns a list of daughter particles of this particle.*/
+  HEPParticleList*  GetMotherList(HEPParticleList *list);
+public:
+  HepMC3::GenParticle *part;
+
+#ifdef _USE_ROOT_
+  ClassDef(HepMC3Particle,0)
+#endif
+};
+
+#endif // _HepMC3Particle_H
diff -Naur ORIG/HepMC3Event/LinkDef.h PATCHED/HepMC3Event/LinkDef.h
--- ORIG/HepMC3Event/LinkDef.h	1970-01-01 01:00:00.000000000 +0100
+++ PATCHED/HepMC3Event/LinkDef.h	2021-04-21 16:08:51.930349512 +0200
@@ -0,0 +1,15 @@
+/*
+   Linkdef.h
+
+   Used by ROOT to create dictionaries
+*/
+#ifdef __CINT__
+
+#pragma link off all globals;
+#pragma link off all classes;
+#pragma link off all functions;
+
+#pragma link C++ class HepMC3Event-;
+#pragma link C++ class HepMC3Particle-;
+
+#endif
diff -Naur ORIG/HepMC3Event/Makefile PATCHED/HepMC3Event/Makefile
--- ORIG/HepMC3Event/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ PATCHED/HepMC3Event/Makefile	2021-04-21 16:08:51.973349511 +0200
@@ -0,0 +1,68 @@
+#
+# recompilation of sources only - no linking....
+#
+
+######## Platform dependent compiler settings : ######################
+include ../make.inc
+######################################################################
+
+
+######## Targets #####################################################
+LIB_OBJ = HepMC3Event.o  HepMC3Particle.o \
+
+LIB_HDR = HepMC3Event.h  HepMC3Particle.h \
+          LinkDef.h
+
+LIB     = ../lib/libHepMC3Event.${LIB_EXT}
+LIB_A   = ../lib/libHepMC3Event.a
+LIB_DIR = ../lib
+
+#if ROOT is used we'll need dictionaries also...
+DICT3_SRC = HepMC3EventDict.cxx
+DICT3_HDR = HepMC3EventDict.h
+DICT3_OBJ = HepMC3EventDict.o
+
+ifeq ($(USE_ROOT),yes)
+override LIB_OBJ += $(DICT3_OBJ)
+endif
+# override CXXFLAGS += -U_USE_ROOT_
+
+HEPEVENT_INC=-I../include/
+HEPMC3_INC=-I$(HEPMC3LOCATION)/include
+
+ROOT_CINT=$(ROOTBIN)/rootcint
+
+##############   What has to be built ###############################
+
+
+all:  HEPMC3_HEADERS $(LIB) $(LIB_A)
+#	ln -s *.H ../../include
+
+#%.o: %.cxx %.H 
+#	$(CXX) $(CXXFLAGS) $(HEPMC3_INC) $(CLHEP_INC) $(HEPEVENT_INC) -fexceptions -c $<
+%.o: %.cxx %.h
+	$(CXX) $(CXXFLAGS) $(HEPMC3_INC) $(CLHEP_INC) $(HEPEVENT_INC) -c -fexceptions  $<
+
+$(DICT3_SRC) $(DICT3_HDR): $(LIB_HDR) 
+	$(ROOT_CINT) -f $(DICT3_SRC) -c -p -D_USE_ROOT_ ${INC} \
+	$(HEPMC3_INC) $(CLHEP_INC) $(HEPEVENT_INC) $(LIB_HDR)
+
+$(LIB): $(LIB_OBJ)
+	$(LD)  $(SOFLAGS) -o $(LIB) $(LIB_OBJ) -L$(ROOTLIBPATH) -lCore  -L$(CURDIR)/../lib -lHEPEvent
+
+$(LIB_A): $(LIB_OBJ)
+	ar cr $(LIB_A) $(LIB_OBJ)
+
+HEPMC3_HEADERS: #HepMC3 settings
+ifeq ($(HEPMC3LOCATION), )
+	@echo "HEPMC3LOCATION must be set"
+	@false
+endif		
+
+
+clean:
+	rm -f  *~ core $(LIB_OBJ) 
+	rm -f $(DICT3_SRC) $(DICT3_OBJ) $(DICT3_HDR)
+
+Clean: clean	
+	rm -f  $(LIB) $(LIB_A)
diff -Naur ORIG/HepMCEvent/Makefile PATCHED/HepMCEvent/Makefile
--- ORIG/HepMCEvent/Makefile	2012-09-25 14:34:31.000000001 +0200
+++ PATCHED/HepMCEvent/Makefile	2021-04-21 16:10:47.194344786 +0200
@@ -48,7 +48,7 @@
 	$(HEPMC_INC) $(CLHEP_INC) $(HEPEVENT_INC) $(LIB_HDR)
 
 $(LIB): $(LIB_OBJ)
-	$(LD) $(LDFLAGS) $(SOFLAGS) -o $(LIB) $(LIB_OBJ) -L$(ROOTLIBPATH) -lCore -lCint -L$(CURDIR)/../lib -lHEPEvent
+	$(LD) $(LDFLAGS) $(SOFLAGS) -o $(LIB) $(LIB_OBJ) -L$(ROOTLIBPATH) -lCore  -L$(CURDIR)/../lib -lHEPEvent
 
 $(LIB_A): $(LIB_OBJ)
 	ar cr $(LIB_A) $(LIB_OBJ)
diff -Naur ORIG/Makefile PATCHED/Makefile
--- ORIG/Makefile	2010-02-18 20:36:34.000000001 +0100
+++ PATCHED/Makefile	2021-04-21 16:13:05.016339134 +0200
@@ -4,12 +4,16 @@
 	make -C HEPEvent
 	make -C src
 	@make libHepMCEvent
+	@make libHepMC3Event
 	@echo
 	@echo "###############################################################"
 	@echo "  MC-TESTER libraries compiled."
 ifeq ($(HEPMCLOCATION), )
 	@echo "  (Compiled without HepMC interface library: libHepMCEvent)"
 endif
+ifeq ($(HEPMC3LOCATION), )
+	@echo "  (Compiled without HepMC3 interface library: libHepMC3Event)"
+endif
 	@echo ""
 	@echo "  To build and run demonstation programs go to the directories: "
 	@echo "   examples-F77 or examples-C++"
@@ -21,11 +25,16 @@
 	@echo "HepMC interface library libHepMCEvent created."
 endif
 
+libHepMC3Event:
+ifneq ($(HEPMC3LOCATION), )
+	make -C HepMC3Event
+	@echo "HepMC3 interface library libHepMC3Event created."
+endif
 install:
-	mkdir -p $(PREFIX)/include
-	cp include/* $(PREFIX)/include/.
-	mkdir -p $(PREFIX)/lib
-	cp lib/* $(PREFIX)/lib/.
+	mkdir -p  $(DESTDIR)/$(PREFIX)/include
+	cp include/*  $(DESTDIR)/$(PREFIX)/include/.
+	mkdir -p  $(DESTDIR)$(LIBDIR)/
+	cp lib/*  $(DESTDIR)$(LIBDIR)/
 
 make.inc:
 	@echo ""
@@ -41,7 +50,12 @@
 clean:
 	make -C src clean
 	make -C HEPEvent clean
+ifneq ($(HEPMCLOCATION), )
 	make -C HepMCEvent clean
+endif
+ifneq ($(HEPMC3LOCATION), )
+	make -C HepMC3Event clean
+endif
 	make -C analyze clean
 	rm -rf lib/*
 
diff -Naur ORIG/platform/afs.paths.csh PATCHED/platform/afs.paths.csh
--- ORIG/platform/afs.paths.csh	2010-01-30 22:15:14.000000001 +0100
+++ PATCHED/platform/afs.paths.csh	2021-04-21 16:12:37.174340275 +0200
@@ -17,6 +17,8 @@
 setenv AFS_PATHS 'yes'
 
 setenv HEPMCLOCATION '/afs/cern.ch/sw/lcg/external/HepMC/2.03.09/slc4_amd64_gcc34'
+#This will not  work! FIXME!
+setenv HEPMC3LOCATION '/afs/cern.ch/sw/lcg/external'
 setenv PYTHIALOCATION '/afs/cern.ch/sw/lcg/external/MCGenerators/pythia8/135/slc4_amd64_gcc34'
 
 # Path to MC-Tester in afs compatible with above HepMC and Pythia8
diff -Naur ORIG/platform/afs.paths.sh PATCHED/platform/afs.paths.sh
--- ORIG/platform/afs.paths.sh	2010-01-30 22:15:14.000000001 +0100
+++ PATCHED/platform/afs.paths.sh	2021-04-21 16:12:32.955340448 +0200
@@ -16,6 +16,8 @@
 export AFS_PATHS=yes
 
 export HEPMCLOCATION=/afs/cern.ch/sw/lcg/external/HepMC/2.03.09/slc4_amd64_gcc34
+#This will not  work! FIXME!
+export HEPMC3LOCATION=/afs/cern.ch/sw/lcg/external
 export PYTHIALOCATION=/afs/cern.ch/sw/lcg/external/MCGenerators/pythia8/135/slc4_amd64_gcc34
 
 # Path to MC-Tester in afs compatible with above HepMC and Pythia8
diff -Naur ORIG/platform/configure.paths.sh.in PATCHED/platform/configure.paths.sh.in
--- ORIG/platform/configure.paths.sh.in	2010-02-18 13:57:18.000000001 +0100
+++ PATCHED/platform/configure.paths.sh.in	2021-04-21 16:12:27.823340659 +0200
@@ -2,5 +2,6 @@
 
 export PREFIX=@prefix@
 export HEPMCLOCATION=@with_HepMC@
+export HEPMC3LOCATION=@with_HepMC3@
 export PYTHIALOCATION=@with_Pythia8@
 export ROOTLOCATION=@ROOTBIN@
diff -Naur ORIG/platform/LCGCONFIG/configure.ac PATCHED/platform/LCGCONFIG/configure.ac
--- ORIG/platform/LCGCONFIG/configure.ac	2010-02-23 14:00:55.000000001 +0100
+++ PATCHED/platform/LCGCONFIG/configure.ac	2021-04-21 16:12:10.125341385 +0200
@@ -1,7 +1,7 @@
 # Process this file with autoconf to produce a configure script.
 
 AC_PREREQ(2.59)
-AC_INIT( [MC-TESTER], [1.24], [tomasz.przedzinski@uj.edu.pl] )
+AC_INIT( [MC-TESTER], [1.25], [tomasz.przedzinski@uj.edu.pl] )
 AC_CONFIG_AUX_DIR([config])
 
 AM_INIT_AUTOMAKE
@@ -35,8 +35,8 @@
 		echo ERROR: cannot find HepMC include directory >&2
 		exit 1
 	fi
-	echo "Checking for a presence of HepMC library in ${HEPMC_DIR}/lib/ ...  "
-	if ls ${HEPMC_DIR}/lib/libHepMC.* >&/dev/null ; then
+	echo "Checking for a presence of HepMC library in ${HEPMC_DIR}/lib*/ ...  "
+	if ls ${HEPMC_DIR}/lib*/libHepMC.* >&/dev/null ; then
 		echo libHepMC found
 	else
 		echo libHepMC NOT found
@@ -45,6 +45,41 @@
 	fi
 fi
 AM_CONDITIONAL([HAS_HEPMC],[test "x$with_hepmc" != "xno"])
+AC_ARG_WITH([hepmc3],
+	    [ AS_HELP_STRING([--with-hepmc3],
+			     [path to HepMC3 3.* installation]
+			    )
+	    ],
+	    [],
+	    [with_hepmc3=no]
+	   )
+
+#AM_CONDITIONAL([HEPMC3_INTERFACE], [test "x$with_hepmc3" != "xno"])
+
+
+AS_IF([test "x$with_hepmc3" != xno], [AC_SUBST(HEPMC3_DIR,[$with_hepmc3])],
+      [echo "WARNING: path to HepMC3 installation is not given. Won't compile HepMC3 interface">&2 ; ]
+     )
+
+if test "x$with_hepmc3" != "xno" ; then
+	echo "Checking for HepMC3 headers ... "
+	if test -s ${HEPMC_DIR}/include/HepMC3/Version.h ; then
+		echo found
+	else
+		echo NOT found
+		echo ERROR: cannot find HepMC3 include directory >&2
+		exit 1
+	fi
+	echo "Checking for a presence of HepMC3 library in ${HEPMC3_DIR}/lib*/ ...  "
+	if ls ${HEPMC_DIR}/lib*/libHepMC3.* >&/dev/null ; then
+		echo libHepMC3 found
+	else
+		echo libHepMC3 NOT found
+		echo ERROR: cannot find "libHepMC3.*" libraries >&2
+		exit 1
+	fi
+fi
+AM_CONDITIONAL([HAS_HEPMC3],[test "x$with_hepmc3" != "xno"])
 			     
 AC_ARG_WITH([pythia8],
 	    [ AS_HELP_STRING([--with-pythia8],
@@ -160,7 +195,7 @@
 
 AM_CONDITIONAL([DO_INSTALL],[test "x$prefix" != "xNONE"])
 
-AC_CONFIG_FILES([Makefile src/Makefile HepMCEvent/Makefile HEPEvent/Makefile include/Makefile])
+AC_CONFIG_FILES([Makefile src/Makefile HepMCEvent/Makefile HepMC3Event/Makefile HEPEvent/Makefile include/Makefile])
 
 
 AC_OUTPUT
diff -Naur ORIG/platform/LCGCONFIG/Makefile.am PATCHED/platform/LCGCONFIG/Makefile.am
--- ORIG/platform/LCGCONFIG/Makefile.am	2010-02-23 14:00:55.000000001 +0100
+++ PATCHED/platform/LCGCONFIG/Makefile.am	2021-04-21 16:11:50.920342172 +0200
@@ -1 +1 @@
-SUBDIRS = src HepMCEvent HEPEvent include
+SUBDIRS = src HepMCEvent HepMC3Event HEPEvent include
diff -Naur ORIG/platform/make.inc.in PATCHED/platform/make.inc.in
--- ORIG/platform/make.inc.in	2012-11-03 18:10:55.000000001 +0100
+++ PATCHED/platform/make.inc.in	2021-04-21 16:12:22.035340896 +0200
@@ -1,7 +1,10 @@
 LIB_EXT = @LIB_EXT@
 
-PREFIX         = @prefix@
+exec_prefix   = @prefix@
+PREFIX        = @prefix@
+LIBDIR        = @libdir@
 HEPMCLOCATION  = @with_HepMC@
+HEPMC3LOCATION  = @with_HepMC3@
 
 USE_ROOT = yes
 
diff -Naur ORIG/src/Makefile PATCHED/src/Makefile
--- ORIG/src/Makefile	2012-09-25 14:34:31.000000001 +0200
+++ PATCHED/src/Makefile	2021-04-21 16:12:43.111340032 +0200
@@ -52,7 +52,7 @@
 
 
 $(LIB): $(LIB_OBJ)
-	$(LD) $(LDFLAGS) $(SOFLAGS) -o $(LIB) $(LIB_OBJ) -L$(ROOTLIBPATH) -lCore -lCint -lHist -lGpad -lGraf -lRIO -L$(CURDIR)/../lib -lHEPEvent
+	$(LD) $(LDFLAGS) $(SOFLAGS) -o $(LIB) $(LIB_OBJ) -L$(ROOTLIBPATH) -lCore  -lHist -lGpad -lGraf -lRIO -L$(CURDIR)/../lib -lHEPEvent
 
 $(LIB_A): $(LIB_OBJ)
 	ar cr $(LIB_A) $(LIB_OBJ) 
