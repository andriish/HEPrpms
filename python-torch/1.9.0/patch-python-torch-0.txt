diff -Naur ORIG/c10/CMakeLists.txt PATCHED/c10/CMakeLists.txt
--- ORIG/c10/CMakeLists.txt	2021-08-23 13:13:18.571113522 +0200
+++ PATCHED/c10/CMakeLists.txt	2021-08-23 13:13:18.573113521 +0200
@@ -107,7 +107,7 @@
 # Note: for now, we will put all export path into one single Caffe2Targets group
 # to deal with the cmake deployment need. Inside the Caffe2Targets set, the
 # individual libraries like libc10.so and libcaffe2.so are still self-contained.
-install(TARGETS c10 EXPORT Caffe2Targets DESTINATION lib)
+install(TARGETS c10 EXPORT Caffe2Targets DESTINATION ${CMAKE_INSTALL_LIBDIR})
 install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
         DESTINATION include
         FILES_MATCHING PATTERN "*.h")
diff -Naur ORIG/caffe2/CMakeLists.txt PATCHED/caffe2/CMakeLists.txt
--- ORIG/caffe2/CMakeLists.txt	2021-08-23 13:13:18.571113522 +0200
+++ PATCHED/caffe2/CMakeLists.txt	2021-08-23 13:13:18.573113521 +0200
@@ -1,3 +1,5 @@
+add_compile_definitions( ONNX_ML=1 ONNX_NAMESPACE=onnx)
+
 # ---[ Generate and install header and cpp files
 include(../cmake/Codegen.cmake)
 
@@ -789,6 +791,8 @@
 # ==========================================================
 
 add_library(torch_cpu ${Caffe2_CPU_SRCS})
+target_include_directories(torch_cpu  PRIVATE      ${TORCH_ROOT}/third_party/foxi ${TORCH_ROOT}/third_party)
+target_compile_definitions(torch_cpu  PRIVATE  ONNX_ML=1 ONNX_NAMESPACE=onnx)
 if(HAVE_SOVERSION)
   set_target_properties(torch_cpu PROPERTIES
       VERSION ${TORCH_VERSION} SOVERSION ${TORCH_SOVERSION})
@@ -1279,7 +1283,7 @@
 
 target_link_libraries(torch_cpu PUBLIC c10)
 target_link_libraries(torch_cpu PUBLIC ${Caffe2_PUBLIC_DEPENDENCY_LIBS})
-target_link_libraries(torch_cpu PRIVATE ${Caffe2_DEPENDENCY_LIBS})
+target_link_libraries(torch_cpu PRIVATE ${Caffe2_DEPENDENCY_LIBS} onnxifi_loader onnx_proto onnx_optimizer)
 target_link_libraries(torch_cpu PRIVATE ${Caffe2_DEPENDENCY_WHOLE_LINK_LIBS})
 target_include_directories(torch_cpu INTERFACE $<INSTALL_INTERFACE:include>)
 target_include_directories(torch_cpu PRIVATE ${Caffe2_CPU_INCLUDE})
@@ -1742,12 +1746,19 @@
   # We should pin the path separator to the forward slash on Windows.
   # More details can be seen at
   # https://github.com/pytorch/pytorch/tree/master/tools/build_pytorch_libs.bat#note-backslash-munging-on-windows
+#  pycmd(PYTHON_SITE_PACKAGES "
+#      import os
+#      import sysconfig
+#      relative_site_packages = sysconfig.get_path('purelib').replace(sysconfig.get_path('data'), '').lstrip(os.path.sep)
+#      print(relative_site_packages)
+#  ")
   pycmd(PYTHON_SITE_PACKAGES "
       import os
       import sysconfig
-      relative_site_packages = sysconfig.get_path('purelib').replace(sysconfig.get_path('data'), '').lstrip(os.path.sep)
+      relative_site_packages = sysconfig.get_path('platlib').replace(sysconfig.get_path('data'), '').lstrip(os.path.sep)
       print(relative_site_packages)
   ")
+
   file(TO_CMAKE_PATH ${PYTHON_SITE_PACKAGES} PYTHON_SITE_PACKAGES)
   set(PYTHON_SITE_PACKAGES ${PYTHON_SITE_PACKAGES} PARENT_SCOPE) # for Summary
   # ---[ Options.
@@ -1811,6 +1822,7 @@
   # ---[ Python.
   if(BUILD_CAFFE2)
   add_library(caffe2_pybind11_state MODULE ${Caffe2_CPU_PYTHON_SRCS})
+  target_compile_definitions(caffe2_pybind11_state PRIVATE ONNX_ML=1 ONNX_NAMESPACE=onnx)
   if(USE_NUMPY)
     target_compile_options(caffe2_pybind11_state PRIVATE "-DUSE_NUMPY")
   endif()
diff -Naur ORIG/cmake/Dependencies.cmake PATCHED/cmake/Dependencies.cmake
--- ORIG/cmake/Dependencies.cmake	2021-08-23 13:13:18.572113521 +0200
+++ PATCHED/cmake/Dependencies.cmake	2021-08-23 13:13:18.573113521 +0200
@@ -1484,7 +1484,16 @@
       message(FATAL_ERROR "Cannot find onnx")
     endif()
     set_property(TARGET onnx_proto PROPERTY IMPORTED_LOCATION ${ONNX_PROTO_LIBRARY})
-    message("-- Found onnx: ${ONNX_LIBRARY} ${ONNX_PROTO_LIBRARY}")
+
+    add_library(onnxifi_loader STATIC IMPORTED)
+    find_library(ONNX_IFI_LOADER_LIBRARY onnxifi_loader)
+    if(NOT ONNX_IFI_LOADER_LIBRARY)
+      message(FATAL_ERROR "Cannot find onnx")
+    endif()
+    set_property(TARGET onnxifi_loader PROPERTY IMPORTED_LOCATION ${ONNX_IFI_LOADER_LIBRARY})
+    list(APPEND Caffe2_DEPENDENCY_LIBS onnxifi_loader)
+
+    message("-- Found onnx: ${ONNX_LIBRARY} ${ONNX_PROTO_LIBRARY} ${ONNX_IFI_LOADER_LIBRARY}")
     list(APPEND Caffe2_DEPENDENCY_LIBS onnx_proto onnx)
   endif()
   include_directories(${FOXI_INCLUDE_DIRS})
@@ -1811,7 +1820,8 @@
 #
 set(TEMP_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
 set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libs" FORCE)
-add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
+find_package(fmt CONFIG REQUIRED)
+#add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
 
 # Disable compiler feature checks for `fmt`.
 #
@@ -1820,7 +1830,7 @@
 # CMAKE_CXX_FLAGS in ways that break feature checks. Since we already know
 # `fmt` is compatible with a superset of the compilers that PyTorch is, it
 # shouldn't be too bad to just disable the checks.
-set_target_properties(fmt-header-only PROPERTIES INTERFACE_COMPILE_FEATURES "")
+#set_target_properties(fmt-header-only PROPERTIES INTERFACE_COMPILE_FEATURES "")
 
 list(APPEND Caffe2_DEPENDENCY_LIBS fmt::fmt-header-only)
 set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS} CACHE BOOL "Build shared libs" FORCE)
diff -Naur ORIG/cmake/public/protobuf.cmake PATCHED/cmake/public/protobuf.cmake
--- ORIG/cmake/public/protobuf.cmake	2021-08-23 13:13:18.572113521 +0200
+++ PATCHED/cmake/public/protobuf.cmake	2021-08-23 13:13:18.573113521 +0200
@@ -1,10 +1,17 @@
 # ---[ Protobuf
 
 # We will try to use the config mode first, and then manual find.
-find_package(Protobuf CONFIG QUIET)
+set(CMAKE_CXX_FLAGS_BEFORE_SEARCH ${CMAKE_CXX_FLAGS})
+set(CMAKE_C_FLAGS_BEFORE_SEARCH ${CMAKE_C_FLAGS})
+set(CMAKE_CXX_FLAGS "")
+set(CMAKE_C_FLAGS "")
+find_package(Protobuf CONFIG)
 if(NOT Protobuf_FOUND)
-  find_package(Protobuf MODULE QUIET)
+  find_package(Protobuf MODULE)
 endif()
+set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_BEFORE_SEARCH})
+set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS_BEFORE_SEARCH})
+  message(STATUS "Caffe2: ${Protobuf_FOUND} ${Protobuf_LIBRARY}  ${Protobuf_LITE_LIBRARY} ${Protobuf_LIBRARY}  ${Protobuf_LITE_LIBRARY} <-")  
 
 if((TARGET protobuf::libprotobuf OR TARGET protobuf::libprotobuf-lite) AND TARGET protobuf::protoc)
   # Hooray. This is the most ideal situation, meaning that you either have a
@@ -16,6 +23,7 @@
   # If the modern targets are not present, we will generate them for you for
   # backward compatibility. This is backported from CMake's new FindProtobuf.cmake
   # content.
+  message(STATUS "Caffe2: BAD! ->${PROTOBUF_LIBRARY}<-")  
   if((NOT PROTOBUF_LIBRARY) AND (NOT PROTOBUF_LITE_LIBRARY))
     message(FATAL_ERROR
         "Caffe2: Found protobuf with old style targets, but could not find targets."
@@ -86,7 +94,7 @@
 # After above, we should have the protobuf related target now.
 if((NOT TARGET protobuf::libprotobuf) AND (NOT TARGET protobuf::libprotobuf-lite))
   message(WARNING
-      "Protobuf cannot be found. Depending on whether you are building Caffe2 "
+      "AV Protobuf cannot be found. Depending on whether you are building Caffe2 "
       "or a Caffe2 dependent library, the next warning / error will give you "
       "more info.")
 endif()
diff -Naur ORIG/.gitmodules PATCHED/.gitmodules
--- ORIG/.gitmodules	2021-08-23 13:13:18.571113522 +0200
+++ PATCHED/.gitmodules	2021-08-23 13:13:18.572113521 +0200
@@ -1,7 +1,3 @@
-[submodule "third_party/pybind11"]
-    ignore = dirty
-    path = third_party/pybind11
-    url = https://github.com/pybind/pybind11.git
 [submodule "third_party/cub"]
     ignore = dirty
     path = third_party/cub
diff -Naur ORIG/modules/detectron/CMakeLists.txt PATCHED/modules/detectron/CMakeLists.txt
--- ORIG/modules/detectron/CMakeLists.txt	2021-08-23 13:13:18.572113521 +0200
+++ PATCHED/modules/detectron/CMakeLists.txt	2021-08-23 13:13:18.573113521 +0200
@@ -17,7 +17,7 @@
 
     torch_set_target_props(caffe2_detectron_ops_gpu)
     target_link_libraries(caffe2_detectron_ops_gpu torch ${OpenMP_link})
-    install(TARGETS caffe2_detectron_ops_gpu DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops_gpu DESTINATION ${CMAKE_INSTALL_LIBDIR})
     if(MSVC)
       install(FILES $<TARGET_PDB_FILE:caffe2_detectron_ops_gpu> DESTINATION lib OPTIONAL)
     endif()
@@ -31,7 +31,7 @@
     torch_set_target_props(caffe2_detectron_ops_hip)
     target_compile_options(caffe2_detectron_ops_hip PRIVATE ${HIP_CXX_FLAGS})
     target_link_libraries(caffe2_detectron_ops_hip torch)
-    install(TARGETS caffe2_detectron_ops_hip DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops_hip DESTINATION ${CMAKE_INSTALL_LIBDIR})
   elseif(NOT IOS_PLATFORM)
     add_library(caffe2_detectron_ops SHARED ${Detectron_CPU_SRCS})
     if(HAVE_SOVERSION)
@@ -40,7 +40,7 @@
     endif()
     torch_set_target_props(caffe2_detectron_ops)
     target_link_libraries(caffe2_detectron_ops torch ${OpenMP_link})
-    install(TARGETS caffe2_detectron_ops DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops DESTINATION ${CMAKE_INSTALL_LIBDIR})
     if(MSVC)
       install(FILES $<TARGET_PDB_FILE:caffe2_detectron_ops> DESTINATION lib OPTIONAL)
     endif()
diff -Naur ORIG/modules/observers/CMakeLists.txt PATCHED/modules/observers/CMakeLists.txt
--- ORIG/modules/observers/CMakeLists.txt	2021-08-23 13:13:18.572113521 +0200
+++ PATCHED/modules/observers/CMakeLists.txt	2021-08-23 13:13:18.573113521 +0200
@@ -21,7 +21,7 @@
 target_link_libraries(caffe2_observers PUBLIC torch_library)
 target_include_directories(caffe2_observers PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/..)
 target_compile_options(caffe2_observers PRIVATE "-DCAFFE2_BUILD_OBSERVER_LIB")
-install(TARGETS caffe2_observers DESTINATION lib)
+install(TARGETS caffe2_observers DESTINATION ${CMAKE_INSTALL_LIBDIR})
 caffe2_interface_library(caffe2_observers caffe2_observers_library)
 if(MSVC AND BUILD_SHARED_LIBS)
   install(FILES $<TARGET_PDB_FILE:caffe2_observers> DESTINATION lib OPTIONAL)
diff -Naur ORIG/setup.py PATCHED/setup.py
--- ORIG/setup.py	2021-08-23 13:13:18.572113521 +0200
+++ PATCHED/setup.py	2021-08-23 13:13:18.573113521 +0200
@@ -308,6 +308,7 @@
                             ]]
     if not os.path.exists(git_modules_path):
         return default_modules_path
+    return []
     with open(git_modules_path) as f:
         return [os.path.join(cwd, line.split("=", 1)[1].strip()) for line in
                 f.readlines() if line.strip().startswith("path")]
@@ -340,10 +341,10 @@
             sys.exit(1)
     for folder in folders:
         check_for_files(folder, ["CMakeLists.txt", "Makefile", "setup.py", "LICENSE"])
-    check_for_files(os.path.join(third_party_path, 'fbgemm', 'third_party',
-                                 'asmjit'), ['CMakeLists.txt'])
-    check_for_files(os.path.join(third_party_path, 'onnx', 'third_party',
-                                 'benchmark'), ['CMakeLists.txt'])
+    #check_for_files(os.path.join(third_party_path, 'fbgemm', 'third_party',
+    #                             'asmjit'), ['CMakeLists.txt'])
+    #check_for_files(os.path.join(third_party_path, 'onnx', 'third_party',
+    #                             'benchmark'), ['CMakeLists.txt'])
 
 
 # all the work we need to do _before_ setup runs
