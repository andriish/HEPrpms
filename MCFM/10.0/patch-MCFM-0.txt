diff -Naur ORIG/CMakeLists.txt PATCHED/CMakeLists.txt
--- ORIG/CMakeLists.txt	2021-09-15 09:50:57.450449419 +0200
+++ PATCHED/CMakeLists.txt	2021-09-15 09:50:57.450449419 +0200
@@ -1,28 +1,28 @@
-cmake_minimum_required (VERSION 3.13)
+cmake_minimum_required (VERSION 3.11)
 enable_language(Fortran)
 project (mcfm C CXX Fortran)
-
+SET(CMAKE_CASE_INSENSITIVE_TARGETS ON)
 if (CMAKE_Fortran_COMPILER_ID STREQUAL "GNU")
     #target_compile_options( mcfm PRIVATE -Wall -Wextra -Wunreachable-code -Wpedantic)
-    set(CMAKE_Fortran_FLAGS "-cpp -finit-local-zero -Wall -ffixed-line-length-none -ffree-line-length-512 -Wno-unused-variable -Wno-unused-function -Wno-unused-dummy-argument -Wno-conversion -Wno-surprising -Wno-c-binding-type -Wno-real-q-constant -fopenmp")
+    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -cpp -finit-local-zero -Wall -ffixed-line-length-none -ffree-line-length-512 -Wno-unused-variable -Wno-unused-function -Wno-unused-dummy-argument -Wno-conversion -Wno-surprising -Wno-c-binding-type -Wno-real-q-constant -fopenmp")
 elseif (CMAKE_Fortran_COMPILER_ID STREQUAL "Intel")
-    set(CMAKE_Fortran_FLAGS "-fpp -qopenmp -stand f08 -traceback -132 -diag-disable 1622,5268,6916,6919,7416,7343,7373,7346,7713,1789,7355,7356,7026,6243")
+    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fpp -qopenmp -stand f08 -traceback -132 -diag-disable 1622,5268,6916,6919,7416,7343,7373,7346,7713,1789,7355,7356,7026,6243")
 else()
     message( FATAL_ERROR "Unsupported Fortran compiler ${CMAKE_Fortran_COMPILER_ID}")
 endif()
 
 if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
-    set(CMAKE_CXX_FLAGS "-fopenmp")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
 elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
-    set(CMAKE_CXX_FLAGS "-qopenmp  -traceback")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -qopenmp  -traceback")
 else()
     message( FATAL_ERROR "Unsupported C++ compiler ${CMAKE_CXX_COMPILER_ID}")
 endif()
 
 if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
-    set(CMAKE_C_FLAGS "-fopenmp")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fopenmp")
 elseif (CMAKE_C_COMPILER_ID STREQUAL "Intel")
-    set(CMAKE_C_FLAGS "-qopenmp  -traceback")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -qopenmp  -traceback")
 else()
     message( FATAL_ERROR "Unsupported C compiler ${CMAKE_C_COMPILER_ID}")
 endif()
@@ -53,7 +53,9 @@
 ### main MCFM code below
 ### main MCFM code below
 
-add_executable(mcfm)
+add_library(mcfm STATIC)
+add_executable(mcfmmain src/Need/mcfmmain.f)
+
 
 option(use_internal_lhapdf "Use shipped LHAPDF" ON)
 option(use_external_lhapdf "Use system LHAPDF" OFF)
@@ -70,6 +72,8 @@
 endif()
 
 target_include_directories(mcfm PRIVATE src/Inc .)
+target_include_directories(mcfmmain PRIVATE src/Inc .)
+
 add_subdirectory(src)
 add_subdirectory(TensorReduction)
 
@@ -79,15 +83,28 @@
     Fortran_MODULE_DIRECTORY "${CMAKE_BINARY_DIR}/include"
     LINKER_LANGUAGE Fortran)
 
+set_target_properties(mcfmmain PROPERTIES 
+    CXX_STANDARD 11
+    Fortran_MODULE_DIRECTORY "${CMAKE_BINARY_DIR}/include"
+    LINKER_LANGUAGE Fortran)
+
 if(use_mpi)
-    add_compile_definitions(HAVE_MPI=1)
+    if(${CMAKE_VERSION} VERSION_LESS "3.12.0") 
+      add_definitions(-DHAVE_MPI=1)
+    else()
+      add_compile_definitions(HAVE_MPI=1)    
+    endif()
     find_package(MPI REQUIRED)
     target_link_libraries(mcfm ${MPI_Fortran_LIBRARIES})
     message("Using MPI!")
 endif(use_mpi)
 
 if (use_coarray)
-    add_compile_definitions(HAVE_COARRAY=1)
+    if(${CMAKE_VERSION} VERSION_LESS "3.12.0") 
+      add_definitions(-DHAVE_COARRAY=1)
+    else()
+      add_compile_definitions(HAVE_COARRAY=1) 
+    endif()
         message("Using Fortran Coarrays.")
     if (use_mpi)
         message(FATAL_ERROR "MPI and Coarray support are mutually exclusive!")
@@ -125,14 +142,35 @@
     add_dependencies(lhapdf_lib lhapdf)
     target_link_libraries(mcfm lhapdf_lib)
     target_include_directories(mcfm PRIVATE "${CMAKE_SOURCE_DIR}/LHAPDF-6.2.3/local/include")
-    add_compile_definitions(HAVE_LHAPDF=1)
+    if(${CMAKE_VERSION} VERSION_LESS "3.12.0") 
+      add_definitions(-DHAVE_LHAPDF=1)
+    else()
+      add_compile_definitions(HAVE_LHAPDF=1)
+    endif()
 elseif(use_external_lhapdf)
-    find_library(lhapdf_lib NAMES LHAPDF REQUIRED)
-    target_link_libraries(mcfm lhapdf_lib)
-    add_compile_definitions(HAVE_LHAPDF=1)
-endif()
-
-target_link_libraries(mcfm qdmod_lib qd_lib qcdloop_lib quadmath stdc++)
-
-install(TARGETS mcfm DESTINATION Bin)
+    find_library(lhapdf_lib NAMES LHAPDF LHAPDF-6.3.0 REQUIRED)
+    target_link_libraries(mcfm ${lhapdf_lib})
+    if(${CMAKE_VERSION} VERSION_LESS "3.12.0") 
+      add_definitions(-DHAVE_LHAPDF=1)
+    else()
+      add_compile_definitions(HAVE_LHAPDF=1)
+    endif()
+endif()
+
+target_link_libraries(mcfmmain mcfm qdmod_lib qd_lib qcdloop_lib quadmath stdc++)
+set_target_properties(mcfmmain PROPERTIES OUTPUT_NAME "mcfm")
+set(THE_LIB ${CMAKE_BINARY_DIR}/libmcfm.a)
+
+add_custom_target(combined
+        COMMAND ar -x $<TARGET_FILE:qcdloop_lib>
+        COMMAND ar -x $<TARGET_FILE:qd_lib>
+        COMMAND ar -x $<TARGET_FILE:qdmod_lib>
+        COMMAND ar -x $<TARGET_FILE:mcfm>
+        COMMAND ar -qcs ${THE_LIB} *.o
+        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+        DEPENDS mcfm qdmod_lib qd_lib qcdloop_lib
+        )
+include(GNUInstallDirs)
+install(FILES ${THE_LIB} DESTINATION ${CMAKE_INSTALL_LIBDIR} RENAME libMCFM.a)
+install(TARGETS mcfmmain DESTINATION ${CMAKE_INSTALL_BINDIR})
 
diff -Naur ORIG/src/Need/CMakeLists.txt PATCHED/src/Need/CMakeLists.txt
--- ORIG/src/Need/CMakeLists.txt	2021-09-15 09:50:57.450449419 +0200
+++ PATCHED/src/Need/CMakeLists.txt	2021-09-15 09:50:57.450449419 +0200
@@ -55,7 +55,7 @@
 mathfun.f
 mcfm_exit.f
 mcfm_init.f
-mcfmmain.f
+#mcfmmain.f
 mcfm_omp.f
 olo_dummy.f
 parseinput.f90
