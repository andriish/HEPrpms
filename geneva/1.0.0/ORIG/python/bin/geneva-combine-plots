#!/usr/bin/env python
#-------------------------------------------------------------------------------
# Author(s):
#    Christian Bauer, Simone Alioli, Frank Tackmann
#
# Copyright:
#    Copyright (C) 2017, 2018 Geneva Collaboration
#
#    This file is part of the Geneva MC framework. Geneva is distributed under
#    the terms of the GNU General Public License version 3 (GPLv3), see the
#    COPYING file that comes with this distribution for details.
#    Please respect the academic usage guidelines in the GUIDELINES file.
#
# Description:
#    Script to combine analyzer report files
#-------------------------------------------------------------------------------

import sys
import os
import argparse

try:
   import genevapylib
except ImportError:
   sys.exit("[ERROR] Could not find the genevapylib package.\n"
            + "Is your PYTHONPATH set correctly?\n"
            + "Run 'source " + os.path.dirname(__file__) + os.sep
            + "geneva-env.sh' to update it.")

try:
   import genevapylib.process as process
   from genevapylib.CombineAnalyzerFiles import combine
except ImportError as error:
   sys.exit("[ERROR] {0}: {1}\n".format(error.__class__.__name__, error)
            + "[ERROR] Could not load the genevapylib package.\n"
            + "Please ensure all required Python modules are available.")

is_parallelized = True
"""bool: Indicates that the script is parallelized."""


def parse_args(argv):
   parser = argparse.ArgumentParser(description =
      "Used by the 'geneva <stage> ...' commands and normally does not need to be used directly.\n"
      "\n"
      "Combines all given <file>.xml analyzer report files and writes the result to <outfile>.\n"
      "\n"
      "After successful completion, all input files are removed unless --keep\n"
      "is specified. If a backup <path> is given, the input files are moved\n"
      "there (copied with --keep) and the <outfile> is copied there.",
      formatter_class = argparse.RawDescriptionHelpFormatter)
   optional = parser._action_groups.pop()
   parser.add_argument('infiles', nargs = '+',
                       help = 'analyzer report files to combine', metavar = '<file>.xml')
   required = parser.add_argument_group('required arguments')
   required.add_argument("--outfile", required = True,
                         help = "file to write the combined result (may include a path)", metavar = '<outfile>')
   optional.add_argument('--sum', action = 'store_true',
                         help = 'sum the analyzers instead of combining them [off]')
   optional.add_argument("--keep", action = 'store_true',
                         help = "keep input files instead of removing them [off]")
   optional.add_argument("--backup-path", default = "",
                         help = "backup input and output files to <path> ['' = off]", metavar = '<path>')
   parallelize = optional.add_mutually_exclusive_group()
   parallelize.add_argument("-j", "--jobs", type = int, default = 0,
                            help = "number of simultaneous jobs [0 = automatic]", metavar = '<jobs>')
   parallelize.add_argument('--mpi', action = 'store_true',
                            help = 'parallelize with MPI [off]')
   parser._action_groups.append(optional)
   args = parser.parse_args(argv)
   return args

def main(argv):
   args = parse_args(argv)

   process.init(args.mpi)

   return combine(args.infiles, args.outfile, args.keep, args.backup_path,
                  args.jobs, args.sum)

#-------------------------------------------------------------------------------
if __name__ == "__main__":
   sys.exit(main(sys.argv[1:]))
