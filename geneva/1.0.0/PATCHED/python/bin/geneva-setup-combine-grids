#!/usr/bin/env python
#-------------------------------------------------------------------------------
# Author(s):
#    Christian Bauer, Simone Alioli, Frank Tackmann
#
# Copyright:
#    Copyright (C) 2017, 2018 Geneva Collaboration
#
#    This file is part of the Geneva MC framework. Geneva is distributed under
#    the terms of the GNU General Public License version 3 (GPLv3), see the
#    COPYING file that comes with this distribution for details.
#    Please respect the academic usage guidelines in the GUIDELINES file.
#
# Description:
#    Script to combine integration grids
#-------------------------------------------------------------------------------

import sys
import os
import argparse
from collections import OrderedDict

try:
   import genevapylib
except ImportError:
   sys.exit("[ERROR] Could not find the genevapylib package.\n"
            + "Is your PYTHONPATH set correctly?\n"
            + "Run 'source " + os.path.dirname(__file__) + os.sep
            + "geneva-env.sh' to update it.")

try:
   import genevapylib.process as process
   from genevapylib.CombineGridFiles import get_grid_names, combine
except ImportError as error:
   sys.exit("[ERROR] {0}: {1}\n".format(error.__class__.__name__, error)
            + "[ERROR] Could not load the genevapylib package.\n"
            + "Please ensure all required Python modules are available.")

is_parallelized = True
"""bool: Indicates that the script is parallelized."""


def parse_args(argv):
   parser = argparse.ArgumentParser(description =
      "Used by the 'geneva setup ...' command and normally does not need to be used directly.\n"
      "\n"
      "Combines all integration grid files of the form <filestem>_<gridname>_<label>.dat\n"
      "with <label> in the range [<first>, <last>] for all found <gridname>s.\n"
      "The combined result is written to output files <filestem>_<gridname>.dat.\n"
      "\n"
      "After successful completion, all input files are removed unless --keep\n"
      "is specified. If a backup <path> is given, the input files are moved\n"
      "there (copied with --keep) and the output files are copied there.\n",
      formatter_class = argparse.RawDescriptionHelpFormatter)
   parser.add_argument("filestem",
                       help = "filestem of the grid files to combine (may include a path)", metavar = '<filestem>')
   parser.add_argument("--first", type = int, default = 1,
                       help = "first label to combine [1]", metavar = '<first>')
   parser.add_argument("--last", type = int, default = 1,
                     help = "last label to combine [1]", metavar = '<last>')
   parser.add_argument("--keep", action = 'store_true',
                       help = "keep input files instead of removing them [off]")
   parser.add_argument("--backup-path", default = "",
                       help = "backup input and output files to <path> ['' = off]", metavar = '<path>')
   parser.add_argument("--plot-iteration", type = int, default = 0,
                       help = "create plots of the combined grids for this <iteration> [0 = off]", metavar = '<iteration>')
   parser.add_argument('--mpi', action = 'store_true',
                       help = 'parallelize execution with MPI [off]')
   args = parser.parse_args(argv)
   return args

def main(argv):
   args = parse_args(argv)

   process.init(args.mpi)

   # Get the list of grid files to combine (sorted by channel names).
   gridfiles = OrderedDict()
   if process.master:
      try:
         gridfiles = get_grid_names(args.filestem, args.first, args.last)
      except Exception:
         process.signal_error()
   process.exit_if_error()

   if process.parallel:
      gridfiles = process.mpi.bcast(gridfiles)

   return combine(args.filestem, gridfiles, args.keep, args.backup_path,
                  args.plot_iteration)

#-------------------------------------------------------------------------------
if __name__ == "__main__":
   sys.exit(main(sys.argv[1:]))
